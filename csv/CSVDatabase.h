/* **************************************************
**
**    III                DDD  KKK
**    III                DDD  KKK
**                       DDD  KKK
**    III   DDDDDDDDDDD  DDD  KKK            KKK
**    III  DDD           DDD  KKK            KKK
**    III  DDD           DDD  KKK           KKK
**    III  DDD           DDD  KKK        KKKKKK
**    III  DDD           DDD  KKK   KKKKKKKKK
**    III  DDD           DDD  KKK        KKKKKK
**    III  DDD           DDD  KKK           KKK
**    III  DDD           DDD  KKK            KKK
**    III   DDDDDDDDDDDDDDDD  KKK            KKK
**
**
**     SSS         FF
**    S           F   T
**     SSS   OO   FF  TTT W   W  AAA  R RR   EEE
**        S O  O  F   T   W W W  AAAA RR  R EEEEE
**    S   S O  O  F   T   W W W A   A R     E
**     SSS   OO  FFF   TT  W W   AAAA R      EEE
**
**    Copyright: (c) 2015 IDK Software Ltd
**
****************************************************
**
**	Filename	: CRegString.cpp
**	Author		: I.Ferguson
**	Version		: 1.000
**	Date		: 26-05-2015
**
** #$$@@$$# */

#ifndef CSVDATABASE_H_
#define CSVDATABASE_H_

#include <memory>
#include "DBDefines.h"
#include "MetadataObject.h"
#include "ArchivePath.h"

namespace simplearchive {
/**
 * @brief This is the main interface into the CSV Database. This Database is used
 * to create a Comma Separated Value based database.
 * The created files in the database are stored in a directory tree. This directory tree
 * is defined by a year folder, day folder hierarchy much like the main archive folder hierarchy
 * The aim is to limit the resulting files to a manageable size.
 * In addition so the metadata records are also a manageable length, the matedata is spit up
 * into sections. each section it  associated by a unique sequence number. Which will become the primary
 * key to each of these table files This sequence number is generated by other the SQL database or this
 * database if the SQL one is not enabled.
 */



class FolderSetList;
class MirrorDB;
class CSVDatabase {
	CSVDatabase();
	static std::auto_ptr<CSVDatabase> m_this;
	static std::string m_dbpath;
	std::unique_ptr<MirrorDB> m_mirrorDB;
	
public:
	/// Set the database path for the archive. This will normally under shadow/.root
	static void setDBPath(const char *path);
	/// gets the database instance.
	static CSVDatabase &get();
	/// destructor
	virtual ~CSVDatabase();
	void addold(MetadataObject &metadataObject, const char *path);
	void add(MetadataObject &metadataObject, const char *relpath);
	void update(MetadataObject &metadataObject, unsigned int idx, const char *path);
	const MetadataObject *get(unsigned int idx, const char *path);
	std::auto_ptr<MetadataObject> get(const char *name, const char *path);
	bool put(const char *name, const char *path, MetadataObject &mo);

	bool copy(const char *path);
	bool validate(const char *path);



};

} /* namespace simplearchive */
#endif /* CSVDATABASE_H_ */
